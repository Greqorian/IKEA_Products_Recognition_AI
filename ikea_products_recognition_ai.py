# -*- coding: utf-8 -*-
"""IKEA_Products_Recognition_AI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jhhUAAyvhcrYKz5Nrt9Mt_iQ_qY-LK1s

# IKEA Products Recognition AI
### Research on training a neural network model for IKEA store product recognition
---
Model training is based on technology provided by the FastAi library. 
Training is repeated 7 times, increasing the number of object classes to recognize and the number of images to train the model.

The results of all tests summarized in the table:

| Research number | Product classes | Number of images | Accuracy achieved | Time consumed |
|-----------------|-----------------|------------------|-------------------|---------------|
| 1               | 5               | 25               | 71%               | 0,0013 h      |
| 2               | 5               | 805              | 97%               | 0,7 h         |
| 3               | 30              | 282              | 73 %              | 0,13 h        |
| 4               | 30              | 3660             | 95%               | 2,33 h        |
| 5               | 100             | 940              | 71%               | 0,5 h         |
| 6               | 100             | 10192            | 94%               | 8,5 h         |
| 7               | 1000            | 92301            | -                 | ~ 39 h        |

# 0. Research preparation

### 0.1 Install FastAI
"""

! [ -e /content ] && pip install -Uqq fastai  # upgrade fastai on colab

"""### 0.2 Import libraries"""

# package imports
#basics
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import os
import json # json files

#visualisation
from matplotlib import pyplot as plt
#fastai
import torch
from fastai.vision.all import *
from fastai.vision.augment import *
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
device

import pickle

"""### 0.3 Mount Storage"""

from google.colab import drive
drive.mount('/content/drive')

"""# Reseaerch 1 : 5 classes / 805 pictures

1.1 Open list with labels
"""

# Opening JSON file
f = open('/content/drive/MyDrive/DATA/furnitureImages/100-furniture/100-furniture-imagesList.json', "r")
# a dictionary
uniqueList = json.load(f)

"""### 1.2 Convert JSON to pandas data frame"""

df1 = pd.json_normalize(uniqueList)
df1

"""### 1.3 Set path to folder with pictures"""

path = '/content/drive/MyDrive/DATA/furnitureImages/5-first-furnitureImages'
train_path = '/content/drive/MyDrive/DATA/furnitureImages/5-first-furnitureImages/train'

"""### 1.4 Prepare ImageDataLoader"""

img_size = 128
augmentations = [
        Rotate(10, p=0.4, mode='bilinear'), 
        Brightness(max_lighting=0.3,p=0.5),
        Contrast(max_lighting=0.4, p=0.5),
        RandomErasing(p=0.3, sl=0.0, sh=0.2, min_aspect=0.3, max_count=1),
        Flip(p=0.5),
        Zoom(max_zoom=1,p=0.5),
        RandomResizedCrop(img_size)
    ]
dls = ImageDataLoaders.from_df(df=df,
                               path=path,
                               folder='train',
                               valid_pct = 0.2, 
                               bs = 30, 
                               device=device, 
                               num_workers=0, 
                               batch_tfms=augmentations, 
                               item_tfms=Resize(img_size))

"""### 1.5 Prepare ImageDataLoader"""

dls.show_batch()

"""### 1.6 Model training"""

learn = cnn_learner(dls, 
                    resnet34, 
                    metrics=[accuracy,error_rate])

"""### 1.7 Show batch of images"""

learn.lr_find()

"""### 1.8 Fit the model"""

learn.fine_tune(10)

"""### 1.9 Show results"""

learn.show_results()

"""# Reseaerch 2 : 30 classes / 282 pictures

### 2.1 Open list with labels
"""

# Opening JSON file
f = open('/content/drive/MyDrive/DATA/furnitureImages/30-furniture/IkeaOnlineImagesList.json', "r")
# a dictionary
uniqueList = json.load(f)

"""### 2.2 Convert JSON to pandas data frame"""

df1 = pd.json_normalize(uniqueList)
df1

"""### 2.3 Set path to folder with pictures"""

path = '/content/drive/MyDrive/DATA/furnitureImages/30-furniture'
train_path = '/content/drive/MyDrive/DATA/furnitureImages/30-furniture/trainSmall'

"""### 2.4 Prepare ImageDataLoader and train model
> Here the method .from_df is used to load labels from pandas data frame
df = dataframe
valid_pct = % of the all pictures use as a control paket
folder = name of the folder where pictures are located


"""

dls2 = ImageDataLoaders.from_df(df=df1,
                               path=path,
                               folder='trainSmall',
                               valid_pct = 0.2, 
                               bs = 30, 
                               device=device, 
                               num_workers=0, 
                               item_tfms=Resize(460), 
                               batch_tfms=aug_transforms(size=224)
                              )
learn = cnn_learner(dls2, 
                    resnet34, 
                    metrics=[accuracy,error_rate])
learn.lr_find()

"""### 2.5 Fit the model"""

learn.fine_tune(epochs=5,base_lr=0.003)

"""### 2.6 Show results and show the image with the highest error rate

"""

learn.show_results()
interp = Interpretation.from_learner(learn)
interp.plot_top_losses(3)

"""# Reseaerch 3 : 30 classes / 3660 pictures

### 3.1 Open list with labels
"""

# Opening JSON file
f = open('/content/drive/MyDrive/DATA/furnitureImages/30-furniture/ebayImagesList.json', "r")
# a dictionary
uniqueList2 = json.load(f)

"""### 3.2 Convert JSON to pandas data frame"""

df2 = pd.json_normalize(uniqueList2)

"""### 2.3 Set path to folder with pictures"""

path = '/content/drive/MyDrive/DATA/furnitureImages/30-furniture'
train_path = '/content/drive/MyDrive/DATA/furnitureImages/30-furniture/train'

"""### 3.4 Prepare ImageDataLoader
<br/>Here the method .from_df is used to load labels from pandas data frame 
> <br/>df = dataframe 
<br/>valid_pct = % of the all pictures use as a control paket
<br/>folder = name of the folder where pictures are located




"""

dls = ImageDataLoaders.from_df(df=df2,
                               path=path,
                               folder='train',
                               valid_pct = 0.2, 
                               bs = 30, 
                               device=device, 
                               num_workers=0, 
                               item_tfms=Resize(460), 
                               batch_tfms=aug_transforms(size=224)
                              )

"""### 3.5 Show batch of images"""

dls.show_batch()

"""### 3.6 Train model"""

learn = cnn_learner(dls, 
                    resnet34, 
                    metrics=[accuracy,error_rate])
learn.lr_find()

"""### 3.7 Fit the model"""

learn.fine_tune(epochs=5,base_lr=0.003)

"""### 3.8 Show results"""

learn.show_results()

"""### 3.9 Show the image with the highest error rate"""

interp = Interpretation.from_learner(learn)
interp.plot_top_losses(3)

"""### 3.10 Set the directory for model"""

os.chdir('/content/drive/MyDrive/DATA/furnitureImages/30-furniture')

"""### 3.11 Save the model to the selected directory"""

learn.export('30items_model_.pkl')

"""# Reseaerch 4 : 100 classes / 940 pictures

### 4.1 Open list with labels
"""

# Opening JSON file
f = open('/content/drive/MyDrive/DATA/furnitureImages/100-furniture/IkeaOnlineImagesList.json', "r")
# a dictionary
uniqueList = json.load(f)

"""### 4.2 Convert JSON to pandas data frame"""

df1 = pd.json_normalize(uniqueList)
df1

"""### 4.3 Set path to folder with pictures"""

path = '/content/drive/MyDrive/DATA/furnitureImages/100-furniture'
train_path = '/content/drive/MyDrive/DATA/furnitureImages/100-furniture/trainSmall'

"""### 4.4 Prepare ImageDataLoader and train the model"""

dls2 = ImageDataLoaders.from_df(df=df1,
                               path=path,
                               folder='trainSmall',
                               valid_pct = 0.2, 
                               bs = 30, 
                               device=device, 
                               num_workers=0, 
                               item_tfms=Resize(460), 
                               batch_tfms=aug_transforms(size=224)
                              )
learn = cnn_learner(dls2, 
                    resnet34, 
                    metrics=[accuracy,error_rate])
learn.lr_find()

"""### 4.5 Fit the model"""

learn.fine_tune(epochs=5,base_lr=0.003)

"""### 4.6 Show results and show the image with the highest error rate"""

learn.show_results()
interp = Interpretation.from_learner(learn)
interp.plot_top_losses(3)

"""### 4.7 Show results"""

learn.show_results()

"""# Reseaerch 5 : 100 classes / 10192 pictures

### 5.1 Open list with labels
"""

# Opening JSON file
f = open('/content/drive/MyDrive/DATA/furnitureImages/100-furniture/ebayImagesList.json', "r")
# a dictionary
uniqueList3 = json.load(f)

"""### 5.2 Convert JSON to pandas data frame"""

df3 = pd.json_normalize(uniqueList3)
df3

"""### 5.3 Set path to folder with pictures"""

path2 = '/content/drive/MyDrive/DATA/furnitureImages/100-furniture/'
train_path = '/content/drive/MyDrive/DATA/furnitureImages/100-furniture/train'

"""### 5.4 Prepare ImageDataLoader
<br/>Here the method .from_df is used to load labels from pandas data 
"""

dls2 = ImageDataLoaders.from_df(df=df3,
                               path=path2,
                               folder='train',
                               valid_pct = 0.2, 
                               bs = 30, 
                               device=device, 
                               num_workers=0, 
                               item_tfms=Resize(460), 
                               batch_tfms=aug_transforms(size=224)
                              )

"""### 5.6 Show batch of images"""

dls2.show_batch()

"""### 5.7 Train model"""

learn = cnn_learner(dls2, 
                    resnet34, 
                    metrics=[accuracy,error_rate])
learn.lr_find()

"""### 5.8 Fit the model"""

learn.fine_tune(epochs=6,base_lr=0.003)

"""### 5.9 Set the directory for model"""

os.chdir('/content/drive/MyDrive/DATA/furnitureImages/100-furniture')

"""### 5.10 Save the model to the selected directory"""

learn.export('100items_model_.pkl')

"""5.11  Show results and show the image with the highest error rate"""

learn.show_results()
interp = Interpretation.from_learner(learn)
interp.plot_top_losses(3)